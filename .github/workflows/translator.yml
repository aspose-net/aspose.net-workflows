name: Translator

on:
  workflow_dispatch:
    inputs:
      subdomain:
        description: "Target subdomain (e.g., reference.aspose.net)"
        required: true
        default: 'reference.aspose.net'
      families:
        description: "Comma-separated list of families to process (e.g., words,cells,barcode)"
        required: true
        default: 'words,pdf,cells,imaging,barcode,tasks,ocr,html,zip,page,psd,tex'
      languages:
        description: "Comma-separated list of target languages (e.g., zh,es,fr)"
        required: true
        default: 'de,es,fr,ja,ko,ru,zh,ar,it,pt,pl,fa,id,cs,vi,tr,th,sv,el,uk,he'

jobs:
  prepare-matrix:
    name: Prepare Family-Language Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}
    steps:
      - name: Convert families and languages inputs to JSON array of objects
        id: set_matrix
        shell: bash
        run: |
          IFS=',' read -ra FAM_LIST <<< "${{ inputs.families }}"
          IFS=',' read -ra LANG_LIST <<< "${{ inputs.languages }}"
          elements=()
          for fam in "${FAM_LIST[@]}"; do
            fam="$(echo -n "$fam" | xargs)"
            if [[ -z "$fam" ]]; then continue; fi
            for lang in "${LANG_LIST[@]}"; do
              lang="$(echo -n "$lang" | xargs)"
              if [[ -z "$lang" ]]; then continue; fi
              elements+=("{\"family\": \"${fam}\", \"language\": \"${lang}\"}")
            done
          done
          json="[$(IFS=,; echo "${elements[*]}")]"
          echo "matrix=$json" >> $GITHUB_OUTPUT

  translate:
    name: Translate Markdown Files
    needs: prepare-matrix
    runs-on: ubuntu-latest
    timeout-minutes: 360
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.prepare-matrix.outputs.matrix) }}
    permissions:
      contents: write
    steps:
      - name: Checkout aspose.net repository
        uses: actions/checkout@v3
        with:
          repository: Aspose/aspose.net
          path: aspose-net
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0

      - name: Checkout translationcache repository
        uses: actions/checkout@v3
        with:
          repository: smallize/translationcache
          path: translationcache
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install python-frontmatter mistune beautifulsoup4 pyyaml torch transformers sentencepiece

      - name: Configure Git Identity
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Run AST Creator Script
        run: |
          python aspose-net/scripts/ast-translator/ast-creator.py --input "aspose-net/content/${{ inputs.subdomain }}" --family "${{ matrix.family }}"

      - name: Run AST Filter Script
        run: |
          python aspose-net/scripts/ast-translator/ast-filter.py --input "aspose-net/ast/${{ inputs.subdomain }}/${{ matrix.family }}"

      - name: Run AST Translation with Watchdog
        shell: bash
        run: |
          # This step runs both the AST translation and a watchdog that monitors its runtime.
          START_TIME=$(date +%s)
          WATCHDOG_THRESHOLD=19800  # 5 hours 30 minutes in seconds

          # Define the cleanup function to merge and push the partial cache.
          cleanup() {
            echo "Watchdog triggered: Running cleanup process..."
            LANG="${{ matrix.language }}"
            LOCAL_FILE="aspose-net/translation/${LANG}_cache.json"
            REMOTE_FILE="translationcache/${LANG}_cache.json"
            if [ ! -f "$REMOTE_FILE" ]; then
              echo "{}" > "$REMOTE_FILE"
            fi
            # Merge and validate the partial cache.
            python aspose-net/scripts/json-merger/merge.py --input1 "$REMOTE_FILE" --input2 "$LOCAL_FILE" --output "$REMOTE_FILE"
            python aspose-net/scripts/json-merger/validate.py --file "$REMOTE_FILE" --fix

            # Perform Git operations in the translationcache repository.
            cd translationcache
            git fetch origin
            git reset --hard origin/"${GITHUB_REF#refs/heads/}"
            cd ..
            cd translationcache
            git add *.json
            # Updated commit message including subdomain, family, and language.
            commit_message="Watchdog commit for ${{ inputs.subdomain }}, family: ${{ matrix.family }}, language: ${{ matrix.language }} (Partial translation)"
            git commit -m "$commit_message" || echo "Nothing to commit"
            if git push origin "${GITHUB_REF#refs/heads/}"; then
              echo "Cleanup push successful."
            else
              echo "Cleanup push failed."
            fi
            cd ..
            # Create a marker file so that subsequent steps can detect that cleanup occurred.
            touch .watchdog_triggered
          }

          # Start the AST translation process in the background.
          echo "Starting AST translation for subdomain: ${{ inputs.subdomain }}, family: ${{ matrix.family }}, language: ${{ matrix.language }}..."
          python aspose-net/scripts/ast-translator/ast-translator.py \
            --cache_folder aspose-net/translation \
            --device auto \
            --target_languages "${{ matrix.language }}" \
            --batch_size 10 \
            --existing_cache_folder translationcache &
          TRANSLATION_PID=$!

          # Monitor the AST translation process.
          while kill -0 $TRANSLATION_PID 2>/dev/null; do
            CURRENT_TIME=$(date +%s)
            ELAPSED=$(( CURRENT_TIME - START_TIME ))
            if [ $ELAPSED -ge $WATCHDOG_THRESHOLD ]; then
              echo "AST translation has exceeded the allowed time of 5 hours 30 minutes ($WATCHDOG_THRESHOLD seconds)."
              cleanup
              echo "Killing AST translation process..."
              kill $TRANSLATION_PID || true
              wait $TRANSLATION_PID || true
              exit 0
            fi
            sleep 60
          done
          # If the translation process finishes before the threshold:
          wait $TRANSLATION_PID

      - name: Merge and Push Updated Translation Cache
        shell: bash
        env:
          GIT_AUTHOR_NAME: GitHub Actions
          GIT_AUTHOR_EMAIL: actions@github.com
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          # If the watchdog cleanup already ran, skip final merge.
          if [ -f .watchdog_triggered ]; then
            echo "Watchdog cleanup already performed. Skipping final merge and push."
            exit 0
          fi
          LANG="${{ matrix.language }}"
          echo "Final merge and push process starting for language: $LANG..."
          LOCAL_FILE="aspose-net/translation/${LANG}_cache.json"
          REMOTE_FILE="translationcache/${LANG}_cache.json"
          if [ ! -s "$LOCAL_FILE" ]; then
            echo "Local cache file $LOCAL_FILE is empty. Skipping merge for language $LANG."
            exit 0
          fi
          if [ ! -f "$REMOTE_FILE" ]; then
            echo "{}" > "$REMOTE_FILE"
          fi
          
          for attempt in {1..10}; do
            echo "Final commit attempt #$attempt"
            cd translationcache
            git fetch origin
            git reset --hard origin/"${GITHUB_REF#refs/heads/}"
            cd ..
            python aspose-net/scripts/json-merger/merge.py --input1 "$REMOTE_FILE" --input2 "$LOCAL_FILE" --output "$REMOTE_FILE"
            python aspose-net/scripts/json-merger/validate.py --file "$REMOTE_FILE" --fix
            cd translationcache
            git add *.json
            commit_message="Final translation cache commit for ${{ inputs.subdomain }}, family: ${{ matrix.family }}, language: $LANG"
            git commit -m "$commit_message" || echo "Nothing to commit"
            if git push origin "${GITHUB_REF#refs/heads/}"; then
              echo "Final push successful."
              exit 0
            else
              echo "Push failed, retrying in 5 seconds..."
              sleep 5
              cd ..
            fi
          done
          echo "Final push failed after multiple attempts."
          exit 1